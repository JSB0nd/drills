{
  "title": "Упражнение по созданию слайса и API с помощью createSlice и createApi",
  "goals": [
    "Практическое освоение функций createSlice и createApi из библиотеки @reduxjs/toolkit.",
    "Закрепление навыков работы с запросами и созданием API в Redux."
  ],
  "training_topic": "Создание и интеграция слайсов и API-интерфейсов с помощью @reduxjs/toolkit.",
  "required_resources": [
    "Файлы: package.json, webpack.config.js, index.html, drill.js (предоставляются преподавателем)."
  ],
  "instructions": [
    "Введение в упражнение:",
    "- Цель упражнения — научиться создавать слайсы и API-интерфейсы с помощью функций createSlice и createApi из библиотеки @reduxjs/toolkit, а также интегрировать их с магазином Redux.",
    "",
    "Шаг 1. Подготовьте рабочую среду:",
    "- Скачайте и распакуйте архив с файлами, предоставленными преподавателем.",
    "",
    "Шаг 2. Настройка окружения:",
    "- Откройте терминал и перейдите в директорию с проектом.",
    "- Установите зависимости, выполнив команду:",
    {
      "type": "code",
      "title": "Установка зависимостей",
      "code": "npm install"
    },
    "",
    "Шаг 3. Создание слайса и API-интерфейса:",
    "- Откройте файл `drill.js` и вставьте следующий пример кода, пошагово заполняя недостающие части под руководством преподавателя:",
    {
      "type": "code",
      "title": "Импорт и объявление начальных данных",
      "code": "import { configureStore, createSlice } from '@reduxjs/toolkit'; import { createApi, fetchBaseQuery, setupListeners } from '@reduxjs/toolkit/query';"
    },
    "",
    "- Создайте слайс для счётчика с помощью функции createSlice:",
    {
      "type": "code",
      "title": "Создание слайса счётчика",
      "code": "const counterSlice = createSlice({ name: 'counter', initialState: 0, reducers: { increment: (state) => state + 1, decrement: (state) => state > 0 ? state - 1 : state } });"
    },
    "",
    "- Создайте API-интерфейс для получения списка статей с помощью функции createApi:",
    {
      "type": "code",
      "title": "Создание API-интерфейса",
      "code": "const articlesApi = createApi({ reducerPath: 'articles', baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:3037/api/v1' }), endpoints: (build) => ({ getArticles: build.query({ query: () => '/posts' }) }) });"
    },
    "",
    "- Объедините слайс и API-интерфейс в корневом редюсере и настройте магазин Redux:",
    {
      "type": "code",
      "title": "Настройка магазина",
      "code": "const rootReducer = { counter: counterSlice.reducer, [articlesApi.reducerPath]: articlesApi.reducer }; const store = configureStore({ reducer: rootReducer, middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(articlesApi.middleware) });"
    },
    "",
    "- Активируйте слушателей для запросов:",
    {
      "type": "code",
      "title": "Активация слушателей",
      "code": "setupListeners(store.dispatch);"
    },
    "",
    "- Реализуйте функцию для создания карточки статьи:",
    {
      "type": "code",
      "title": "Функция createArticleCard",
      "code": "function createArticleCard(article) { const card = document.createElement('div'); card.className = 'article-card'; card.innerHTML = `<strong>${article.title}</strong><br/>${article.body.slice(0, 100)}...`; return card; }"
    },
    "",
    "- Реализуйте логику отображения данных и кнопок для взаимодействия с пользователями:",
    {
      "type": "code",
      "title": "Логика отображения и взаимодействия",
      "code": "const counterEl = document.getElementById('counter'); const incrBtn = document.getElementById('increment-btn'); const decrBtn = document.getElementById('decrement-btn'); const loadBtn = document.getElementById('load-btn'); const articlesEl = document.getElementById('articles-list');"
    },
    "",
    "- Реализуйте обработчики событий для кнопок и отображения данных:",
    {
      "type": "code",
      "title": "Обработчики событий",
      "code": "incrBtn.addEventListener('click', () => { store.dispatch(counterSlice.actions.increment()); counterEl.textContent = store.getState().counter; }); decrBtn.addEventListener('click', () => { store.dispatch(counterSlice.actions.decrement()); counterEl.textContent = store.getState().counter; }); loadBtn.addEventListener('click', () => { store.dispatch(articlesApi.endpoints.getArticles.initiate()).unwrap().then(articles => { articlesEl.innerHTML = ''; articles.forEach(article => articlesEl.appendChild(createArticleCard(article))); }).catch(error => console.error('Ошибка загрузки:', error)); });"
    },
    "",
    "Шаг 4. Сборка и запуск приложения:",
    "- Запустите сборку проекта с помощью команды:",
    {
      "type": "code",
      "title": "Сборка проекта",
      "code": "npm run build"
    },
    "",
    "- Откройте файл `index.html` в браузере и протестируйте работу приложения.",
    "",
    "Заключение:",
    "- Вы создали слайс и API-интерфейс с помощью функций createSlice и createApi из библиотеки @reduxjs/toolkit, освоив их интеграцию с магазином Redux."
  ],
  "reflection_questions": [
    "Какие задачи решают функции createSlice и createApi в Redux?",
    "Как организуется интеграция слайсов и API-интерфейсов с магазином Redux?",
    "Какие преимущества даёт использование createSlice и createApi перед традиционной настройкой Redux?"
  ],
  "additional_materials": [
    {
    "type": "link",
    "title": "Файлы для выполнения упражнения",
    "name": "1",
    "folder": "1",
    "chapter": "4.9"
    },    
    "Документация @reduxjs/toolkit: https://redux-toolkit.js.org/api/createSlice",
    "Документация RTK Query: https://redux-toolkit.js.org/rtk-query/overview"
  ],
  "final_conclusion": [
    "Вы освоили создание слайсов и API-интерфейсов с помощью функций createSlice и createApi из библиотеки @reduxjs/toolkit, пополнив свои знания и навыки в области управления состоянием и запросами в приложениях."
  ]
}